/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace OptimisticRollup {
  export type RollupBlockStruct = {
    blockNumber: BigNumberish;
    previousBlockHash: BytesLike;
    stateRoot: BytesLike;
    data: BytesLike;
    timestamp: BigNumberish;
  };

  export type RollupBlockStructOutput = [
    blockNumber: bigint,
    previousBlockHash: string,
    stateRoot: string,
    data: string,
    timestamp: bigint
  ] & {
    blockNumber: bigint;
    previousBlockHash: string;
    stateRoot: string;
    data: string;
    timestamp: bigint;
  };
}

export interface OptimisticRollupInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CHALLENGE_PERIOD"
      | "blocks"
      | "challengeBlock"
      | "getBlock"
      | "isChallenged"
      | "submitBlock"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BlockChallenged" | "BlockSubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CHALLENGE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "challengeBlock",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isChallenged",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitBlock",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "CHALLENGE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blocks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "challengeBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isChallenged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitBlock",
    data: BytesLike
  ): Result;
}

export namespace BlockChallengedEvent {
  export type InputTuple = [blockNumber: BigNumberish, challenger: AddressLike];
  export type OutputTuple = [blockNumber: bigint, challenger: string];
  export interface OutputObject {
    blockNumber: bigint;
    challenger: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlockSubmittedEvent {
  export type InputTuple = [
    blockNumber: BigNumberish,
    stateRoot: BytesLike,
    data: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    blockNumber: bigint,
    stateRoot: string,
    data: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    blockNumber: bigint;
    stateRoot: string;
    data: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OptimisticRollup extends BaseContract {
  connect(runner?: ContractRunner | null): OptimisticRollup;
  waitForDeployment(): Promise<this>;

  interface: OptimisticRollupInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CHALLENGE_PERIOD: TypedContractMethod<[], [bigint], "view">;

  blocks: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint] & {
        blockNumber: bigint;
        previousBlockHash: string;
        stateRoot: string;
        data: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  challengeBlock: TypedContractMethod<
    [
      blockNumber: BigNumberish,
      correctStateRoot: BytesLike,
      proofData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getBlock: TypedContractMethod<
    [blockNumber: BigNumberish],
    [OptimisticRollup.RollupBlockStructOutput],
    "view"
  >;

  isChallenged: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  submitBlock: TypedContractMethod<
    [previousBlockHash: BytesLike, stateRoot: BytesLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CHALLENGE_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "blocks"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint] & {
        blockNumber: bigint;
        previousBlockHash: string;
        stateRoot: string;
        data: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "challengeBlock"
  ): TypedContractMethod<
    [
      blockNumber: BigNumberish,
      correctStateRoot: BytesLike,
      proofData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBlock"
  ): TypedContractMethod<
    [blockNumber: BigNumberish],
    [OptimisticRollup.RollupBlockStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isChallenged"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "submitBlock"
  ): TypedContractMethod<
    [previousBlockHash: BytesLike, stateRoot: BytesLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BlockChallenged"
  ): TypedContractEvent<
    BlockChallengedEvent.InputTuple,
    BlockChallengedEvent.OutputTuple,
    BlockChallengedEvent.OutputObject
  >;
  getEvent(
    key: "BlockSubmitted"
  ): TypedContractEvent<
    BlockSubmittedEvent.InputTuple,
    BlockSubmittedEvent.OutputTuple,
    BlockSubmittedEvent.OutputObject
  >;

  filters: {
    "BlockChallenged(uint256,address)": TypedContractEvent<
      BlockChallengedEvent.InputTuple,
      BlockChallengedEvent.OutputTuple,
      BlockChallengedEvent.OutputObject
    >;
    BlockChallenged: TypedContractEvent<
      BlockChallengedEvent.InputTuple,
      BlockChallengedEvent.OutputTuple,
      BlockChallengedEvent.OutputObject
    >;

    "BlockSubmitted(uint256,bytes32,bytes,uint256)": TypedContractEvent<
      BlockSubmittedEvent.InputTuple,
      BlockSubmittedEvent.OutputTuple,
      BlockSubmittedEvent.OutputObject
    >;
    BlockSubmitted: TypedContractEvent<
      BlockSubmittedEvent.InputTuple,
      BlockSubmittedEvent.OutputTuple,
      BlockSubmittedEvent.OutputObject
    >;
  };
}
